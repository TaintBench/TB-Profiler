java.util.List: boolean add(java.lang.Object)
java.util.List: boolean addAll(java.util.Collection)
java.util.List: boolean addAll(int,java.util.Collection)
java.util.Set: boolean add(java.lang.Object)
java.util.Set: boolean addAll(java.util.Collection)
java.util.Collection: boolean add(java.lang.Object)
java.util.Collection: boolean addAll(java.util.Collection)
java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)
java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.Vector: boolean add(java.lang.Object)
java.util.Vector: boolean addAll(java.util.Collection)
java.util.Vector: boolean addAll(int,java.util.Collection)
java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)
java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.AbstractList: boolean add(java.lang.Object)
java.util.AbstractList: boolean addAll(int,java.util.Collection)
java.util.AbstractCollection: boolean add(java.lang.Object)
java.util.AbstractCollection: boolean addAll(java.util.Collection)
java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)
java.util.ArrayList: boolean add(java.lang.Object)
java.util.ArrayList: boolean addAll(java.util.Collection)
java.util.ArrayList: boolean addAll(int,java.util.Collection)
java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])
java.util.Queue: boolean add(java.lang.Object)
java.util.Deque: boolean add(java.lang.Object)
java.util.HashSet: boolean add(java.lang.Object)
java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)
java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object)
java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object,java.lang.Object[])
java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)
java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)
java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)
java.util.LinkedList: boolean add(java.lang.Object)
java.util.LinkedList: boolean addAll(java.util.Collection)
java.util.LinkedList: boolean addAll(int,java.util.Collection)
java.util.AbstractSequentialList: boolean addAll(int,java.util.Collection)
java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)
java.util.concurrent.atomic.AtomicLong: long addAndGet(long)
java.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)
java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)
java.util.concurrent.ConcurrentHashMap$ValuesView: boolean add(java.lang.Object)
java.util.concurrent.ConcurrentHashMap$ValuesView: boolean addAll(java.util.Collection)
java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)
java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)
java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)
java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)
java.util.concurrent.ConcurrentLinkedQueue: boolean addAll(java.util.Collection)
java.util.AbstractQueue: boolean add(java.lang.Object)
java.util.AbstractQueue: boolean addAll(java.util.Collection)
java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)
java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)
java.util.TreeSet: boolean add(java.lang.Object)
java.util.TreeSet: boolean addAll(java.util.Collection)
java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)
java.util.concurrent.ArrayBlockingQueue: boolean add(java.lang.Object)
java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)
java.util.concurrent.CopyOnWriteArraySet: boolean addAll(java.util.Collection)
java.util.ArrayDeque: boolean add(java.lang.Object)
java.util.Collections$AsLIFOQueue: boolean add(java.lang.Object)
java.util.Collections$CheckedCollection: boolean add(java.lang.Object)
java.util.Collections$CheckedCollection: boolean addAll(java.util.Collection)
java.util.Collections$CheckedList: boolean addAll(int,java.util.Collection)
java.util.Collections$CheckedMap$CheckedEntrySet: boolean add(java.util.Map$Entry)
java.util.Collections$CheckedMap$CheckedEntrySet: boolean addAll(java.util.Collection)
java.util.Collections$CheckedMap$CheckedEntrySet: boolean add(java.lang.Object)
java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.Collections$CheckedMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.stream.IntStream$Builder: java.util.stream.IntStream$Builder add(int)
java.util.Collections$SingletonMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.Collections$SynchronizedList: boolean addAll(int,java.util.Collection)
java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)
java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)
java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.Collections$SynchronizedMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)
java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)
java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.Collections$UnmodifiableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.RegularEnumSet: boolean add(java.lang.Enum)
java.util.RegularEnumSet: boolean addAll(java.util.Collection)
java.util.RegularEnumSet: boolean add(java.lang.Object)
java.util.JumboEnumSet: boolean add(java.lang.Enum)
java.util.JumboEnumSet: boolean addAll(java.util.Collection)
java.util.JumboEnumSet: boolean add(java.lang.Object)
java.util.PriorityQueue: boolean add(java.lang.Object)
java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.concurrent.BlockingDeque: boolean add(java.lang.Object)
java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentLinkedDeque: boolean add(java.lang.Object)
java.util.concurrent.ConcurrentLinkedDeque: boolean addAll(java.util.Collection)
java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentSkipListMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object put(java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.concurrent.ConcurrentSkipListSet: boolean add(java.lang.Object)
java.util.concurrent.DelayQueue: boolean add(java.util.concurrent.Delayed)
java.util.concurrent.DelayQueue: boolean add(java.lang.Object)
java.util.concurrent.LinkedBlockingDeque: boolean add(java.lang.Object)
java.util.concurrent.LinkedTransferQueue: boolean add(java.lang.Object)
java.util.concurrent.PriorityBlockingQueue: boolean add(java.lang.Object)
java.util.concurrent.atomic.AtomicIntegerArray: int addAndGet(int,int)
java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: int addAndGet(java.lang.Object,int)
java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int addAndGet(java.lang.Object,int)
java.util.concurrent.atomic.AtomicLongArray: long addAndGet(int,long)
java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: long addAndGet(java.lang.Object,long)
java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)
java.util.ArrayList$SubList: boolean addAll(java.util.Collection)
java.util.ArrayList$SubList: boolean addAll(int,java.util.Collection)
java.util.Collections$UnmodifiableList: boolean addAll(int,java.util.Collection)
java.util.SubList: boolean addAll(java.util.Collection)
java.util.SubList: boolean addAll(int,java.util.Collection)
java.util.Collections$SetFromMap: boolean add(java.lang.Object)
java.util.Collections$EmptyMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
java.util.Hashtable$EntrySet: boolean add(java.util.Map$Entry)
java.util.Hashtable$EntrySet: boolean add(java.lang.Object)