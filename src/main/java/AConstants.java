import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.List;
import java.util.stream.Collectors;

/**
 * contains APIs considered for detecting attributes by {@link AttributesExtractor}:
 *
 * @author Linghui Luo
 */
public class AConstants {

  public static String[] reflectionAPIs = {
    "java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()",
    "java.lang.reflect.Type: java.lang.String getTypeName()",
    "java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)",
    "java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
    "java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotations()",
    "java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)",
    "java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)",
    "java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)",
    "java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
    "java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation lambda$getDeclaredAnnotationsByType$0(java.lang.'annotation'.Annotation,java.lang.'annotation'.Annotation)",
    "java.lang.reflect.Constructor: sun.reflect.generics.factory.GenericsFactory getFactory()",
    "java.lang.reflect.Constructor: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()",
    "java.lang.reflect.Constructor: java.lang.reflect.Executable getRoot()",
    "java.lang.reflect.Constructor: java.lang.reflect.Constructor copy()",
    "java.lang.reflect.Constructor: boolean hasGenericInformation()",
    "java.lang.reflect.Constructor: byte[] getAnnotationBytes()",
    "java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()",
    "java.lang.reflect.Constructor: java.lang.String getName()",
    "java.lang.reflect.Constructor: int getModifiers()",
    "java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()",
    "java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()",
    "java.lang.reflect.Constructor: int getParameterCount()",
    "java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()",
    "java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()",
    "java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()",
    "java.lang.reflect.Constructor: java.lang.String toString()",
    "java.lang.reflect.Constructor: java.lang.String toGenericString()",
    "java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])",
    "java.lang.reflect.Constructor: boolean isVarArgs()",
    "java.lang.reflect.Constructor: boolean isSynthetic()",
    "java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor acquireConstructorAccessor()",
    "java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor getConstructorAccessor()",
    "java.lang.reflect.Constructor: int getSlot()",
    "java.lang.reflect.Constructor: java.lang.String getSignature()",
    "java.lang.reflect.Constructor: byte[] getRawAnnotations()",
    "java.lang.reflect.Constructor: byte[] getRawParameterAnnotations()",
    "java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
    "java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
    "java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()",
    "java.lang.reflect.Constructor: java.lang.reflect.AnnotatedType getAnnotatedReturnType()",
    "java.lang.reflect.Constructor: java.lang.reflect.AnnotatedType getAnnotatedReceiverType()",
    "java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()",
    "java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()",
    "java.lang.reflect.TypeVariable: java.lang.String getName()",
    "java.lang.reflect.TypeVariable: java.lang.reflect.AnnotatedType[] getAnnotatedBounds()",
    "java.lang.reflect.Method: java.lang.String getGenericSignature()",
    "java.lang.reflect.Method: sun.reflect.generics.factory.GenericsFactory getFactory()",
    "java.lang.reflect.Method: sun.reflect.generics.repository.MethodRepository getGenericInfo()",
    "java.lang.reflect.Method: java.lang.reflect.Method copy()",
    "java.lang.reflect.Method: java.lang.reflect.Executable getRoot()",
    "java.lang.reflect.Method: boolean hasGenericInformation()",
    "java.lang.reflect.Method: byte[] getAnnotationBytes()",
    "java.lang.reflect.Method: java.lang.Class getDeclaringClass()",
    "java.lang.reflect.Method: java.lang.String getName()",
    "java.lang.reflect.Method: int getModifiers()",
    "java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()",
    "java.lang.reflect.Method: java.lang.Class getReturnType()",
    "java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()",
    "java.lang.reflect.Method: java.lang.Class[] getParameterTypes()",
    "java.lang.reflect.Method: int getParameterCount()",
    "java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()",
    "java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()",
    "java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()",
    "java.lang.reflect.Method: java.lang.String toString()",
    "java.lang.reflect.Method: java.lang.String toGenericString()",
    "java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])",
    "java.lang.reflect.Method: boolean isBridge()",
    "java.lang.reflect.Method: boolean isVarArgs()",
    "java.lang.reflect.Method: boolean isSynthetic()",
    "java.lang.reflect.Method: boolean isDefault()",
    "java.lang.reflect.Method: sun.reflect.MethodAccessor acquireMethodAccessor()",
    "java.lang.reflect.Method: sun.reflect.MethodAccessor getMethodAccessor()",
    "java.lang.reflect.Method: java.lang.Object getDefaultValue()",
    "java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
    "java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
    "java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()",
    "java.lang.reflect.Method: java.lang.reflect.AnnotatedType getAnnotatedReturnType()",
    "java.lang.reflect.Method: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()",
    "java.lang.reflect.Field: java.lang.String getGenericSignature()",
    "java.lang.reflect.Field: sun.reflect.generics.factory.GenericsFactory getFactory()",
    "java.lang.reflect.Field: sun.reflect.generics.repository.FieldRepository getGenericInfo()",
    "java.lang.reflect.Field: java.lang.reflect.Field copy()",
    "java.lang.reflect.Field: java.lang.Class getDeclaringClass()",
    "java.lang.reflect.Field: java.lang.String getName()",
    "java.lang.reflect.Field: int getModifiers()",
    "java.lang.reflect.Field: boolean isEnumConstant()",
    "java.lang.reflect.Field: boolean isSynthetic()",
    "java.lang.reflect.Field: java.lang.Class getType()",
    "java.lang.reflect.Field: java.lang.reflect.Type getGenericType()",
    "java.lang.reflect.Field: java.lang.String toString()",
    "java.lang.reflect.Field: java.lang.String toGenericString()",
    "java.lang.reflect.Field: java.lang.Object get(java.lang.Object)",
    "java.lang.reflect.Field: boolean getBoolean(java.lang.Object)",
    "java.lang.reflect.Field: byte getByte(java.lang.Object)",
    "java.lang.reflect.Field: char getChar(java.lang.Object)",
    "java.lang.reflect.Field: short getShort(java.lang.Object)",
    "java.lang.reflect.Field: int getInt(java.lang.Object)",
    "java.lang.reflect.Field: long getLong(java.lang.Object)",
    "java.lang.reflect.Field: float getFloat(java.lang.Object)",
    "java.lang.reflect.Field: double getDouble(java.lang.Object)",
    "java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)",
    "java.lang.reflect.Field: sun.reflect.FieldAccessor acquireFieldAccessor(boolean)",
    "java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(boolean)",
    "java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
    "java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)",
    "java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
    "java.lang.reflect.Field: java.util.Map declaredAnnotations()",
    "java.lang.reflect.Field: byte[] getTypeAnnotationBytes0()",
    "java.lang.reflect.Field: java.lang.reflect.AnnotatedType getAnnotatedType()",
    "java.lang.reflect.Executable: byte[] getAnnotationBytes()",
    "java.lang.reflect.Executable: java.lang.reflect.Executable getRoot()",
    "java.lang.reflect.Executable: boolean hasGenericInformation()",
    "java.lang.reflect.Executable: sun.reflect.generics.repository.ConstructorRepository getGenericInfo()",
    "java.lang.reflect.Executable: boolean equalParamTypes(java.lang.Class[],java.lang.Class[])",
    "java.lang.reflect.Executable: java.lang.'annotation'.Annotation[][] parseParameterAnnotations(byte[])",
    "java.lang.reflect.Executable: java.lang.String sharedToString(int,boolean,java.lang.Class[],java.lang.Class[])",
    "java.lang.reflect.Executable: java.lang.String sharedToGenericString(int,boolean)",
    "java.lang.reflect.Executable: java.lang.Class getDeclaringClass()",
    "java.lang.reflect.Executable: java.lang.String getName()",
    "java.lang.reflect.Executable: int getModifiers()",
    "java.lang.reflect.Executable: java.lang.reflect.TypeVariable[] getTypeParameters()",
    "java.lang.reflect.Executable: java.lang.Class[] getParameterTypes()",
    "java.lang.reflect.Executable: int getParameterCount()",
    "java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()",
    "java.lang.reflect.Executable: java.lang.reflect.Type[] getAllGenericParameterTypes()",
    "java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()",
    "java.lang.reflect.Executable: java.lang.reflect.Parameter[] synthesizeAllParams()",
    "java.lang.reflect.Executable: java.lang.reflect.Parameter[] privateGetParameters()",
    "java.lang.reflect.Executable: boolean hasRealParameterData()",
    "java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters0()",
    "java.lang.reflect.Executable: byte[] getTypeAnnotationBytes0()",
    "java.lang.reflect.Executable: byte[] getTypeAnnotationBytes()",
    "java.lang.reflect.Executable: java.lang.Class[] getExceptionTypes()",
    "java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericExceptionTypes()",
    "java.lang.reflect.Executable: java.lang.String toGenericString()",
    "java.lang.reflect.Executable: boolean isVarArgs()",
    "java.lang.reflect.Executable: boolean isSynthetic()",
    "java.lang.reflect.Executable: java.lang.'annotation'.Annotation[][] getParameterAnnotations()",
    "java.lang.reflect.Executable: java.lang.'annotation'.Annotation[][] sharedGetParameterAnnotations(java.lang.Class[],byte[])",
    "java.lang.reflect.Executable: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
    "java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)",
    "java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
    "java.lang.reflect.Executable: java.util.Map declaredAnnotations()",
    "java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReturnType()",
    "java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReturnType0(java.lang.reflect.Type)",
    "java.lang.reflect.Executable: java.lang.reflect.AnnotatedType getAnnotatedReceiverType()",
    "java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()",
    "java.lang.reflect.Executable: java.lang.reflect.AnnotatedType[] getAnnotatedExceptionTypes()",
    "java.lang.reflect.AnnotatedType: java.lang.reflect.Type getType()",
    "java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()",
    "java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()",
    "java.lang.reflect.AccessibleObject: boolean isAccessible()",
    "java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
    "java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)",
    "java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)",
    "java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotations()",
    "java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)",
    "java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)",
    "java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
    "java.lang.reflect.Member: java.lang.Class getDeclaringClass()",
    "java.lang.reflect.Member: java.lang.String getName()",
    "java.lang.reflect.Member: int getModifiers()",
    "java.lang.reflect.Member: boolean isSynthetic()",
    "java.lang.reflect.Parameter: boolean isNamePresent()",
    "java.lang.reflect.Parameter: java.lang.String toString()",
    "java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()",
    "java.lang.reflect.Parameter: int getModifiers()",
    "java.lang.reflect.Parameter: java.lang.String getName()",
    "java.lang.reflect.Parameter: java.lang.String getRealName()",
    "java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()",
    "java.lang.reflect.Parameter: java.lang.Class getType()",
    "java.lang.reflect.Parameter: java.lang.reflect.AnnotatedType getAnnotatedType()",
    "java.lang.reflect.Parameter: boolean isImplicit()",
    "java.lang.reflect.Parameter: boolean isSynthetic()",
    "java.lang.reflect.Parameter: boolean isVarArgs()",
    "java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)",
    "java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)",
    "java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()",
    "java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)",
    "java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)",
    "java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotations()",
    "java.lang.reflect.Parameter: java.util.Map declaredAnnotations()",
    "java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()",
    "java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)",
    "java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])",
    "java.lang.reflect.Array: int getLength(java.lang.Object)",
    "java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)",
    "java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)",
    "java.lang.reflect.Array: byte getByte(java.lang.Object,int)",
    "java.lang.reflect.Array: char getChar(java.lang.Object,int)",
    "java.lang.reflect.Array: short getShort(java.lang.Object,int)",
    "java.lang.reflect.Array: int getInt(java.lang.Object,int)",
    "java.lang.reflect.Array: long getLong(java.lang.Object,int)",
    "java.lang.reflect.Array: float getFloat(java.lang.Object,int)",
    "java.lang.reflect.Array: double getDouble(java.lang.Object,int)",
    "java.lang.reflect.Array: java.lang.Object newArray(java.lang.Class,int)",
    "java.lang.reflect.Array: java.lang.Object multiNewArray(java.lang.Class,int[])",
    "java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()",
    "java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()",
    "java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()",
    "java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()",
    "java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()",
    "java.lang.reflect.Modifier: boolean isPublic(int)",
    "java.lang.reflect.Modifier: boolean isPrivate(int)",
    "java.lang.reflect.Modifier: boolean isProtected(int)",
    "java.lang.reflect.Modifier: boolean isStatic(int)",
    "java.lang.reflect.Modifier: boolean isFinal(int)",
    "java.lang.reflect.Modifier: boolean isSynchronized(int)",
    "java.lang.reflect.Modifier: boolean isVolatile(int)",
    "java.lang.reflect.Modifier: boolean isTransient(int)",
    "java.lang.reflect.Modifier: boolean isNative(int)",
    "java.lang.reflect.Modifier: boolean isInterface(int)",
    "java.lang.reflect.Modifier: boolean isAbstract(int)",
    "java.lang.reflect.Modifier: boolean isStrict(int)",
    "java.lang.reflect.Modifier: java.lang.String toString(int)",
    "java.lang.reflect.Modifier: boolean isSynthetic(int)",
    "java.lang.reflect.Modifier: boolean isMandated(int)",
    "java.lang.reflect.Modifier: int classModifiers()",
    "java.lang.reflect.Modifier: int interfaceModifiers()",
    "java.lang.reflect.Modifier: int constructorModifiers()",
    "java.lang.reflect.Modifier: int methodModifiers()",
    "java.lang.reflect.Modifier: int fieldModifiers()",
    "java.lang.reflect.Modifier: int parameterModifiers()",
    "java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getUndeclaredThrowable()",
    "java.lang.reflect.UndeclaredThrowableException: java.lang.Throwable getCause()",
    "java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])",
    "java.lang.reflect.Proxy: java.lang.Class getProxyClass0(java.lang.ClassLoader,java.lang.Class[])",
    "java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)",
    "java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)",
    "java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)",
    "java.lang.reflect.Proxy: java.lang.Class defineClass0(java.lang.ClassLoader,java.lang.String,byte[],int,int)",
    "java.lang.reflect.Proxy: java.lang.Object access$200()",
    "java.lang.reflect.Proxy: java.lang.Class access$300(java.lang.ClassLoader,java.lang.String,byte[],int,int)",
    "java.lang.reflect.WeakCache: java.lang.Object get(java.lang.Object,java.lang.Object)",
    "java.lang.reflect.WeakCache: boolean containsValue(java.lang.Object)",
    "java.lang.reflect.WeakCache: int size()",
    "java.lang.reflect.WeakCache: java.util.function.BiFunction access$000(java.lang.reflect.WeakCache)",
    "java.lang.reflect.WeakCache: java.util.concurrent.ConcurrentMap access$100(java.lang.reflect.WeakCache)",
    "java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
    "java.lang.reflect.AnnotatedArrayType: java.lang.reflect.AnnotatedType getAnnotatedGenericComponentType()",
    "java.lang.reflect.AnnotatedParameterizedType: java.lang.reflect.AnnotatedType[] getAnnotatedActualTypeArguments()",
    "java.lang.reflect.AnnotatedTypeVariable: java.lang.reflect.AnnotatedType[] getAnnotatedBounds()",
    "java.lang.reflect.AnnotatedWildcardType: java.lang.reflect.AnnotatedType[] getAnnotatedLowerBounds()",
    "java.lang.reflect.AnnotatedWildcardType: java.lang.reflect.AnnotatedType[] getAnnotatedUpperBounds()",
    "java.lang.reflect.Proxy$1: java.lang.Void run()",
    "java.lang.reflect.Proxy$1: java.lang.Object run()",
    "java.lang.reflect.WeakCache$CacheKey: java.lang.Object valueOf(java.lang.Object,java.lang.ref.ReferenceQueue)",
    "java.lang.reflect.WeakCache$Factory: java.lang.Object get()",
    "java.lang.reflect.WeakCache$LookupValue: java.lang.Object get()",
    "java.lang.reflect.Proxy$ProxyClassFactory: java.lang.Class apply(java.lang.ClassLoader,java.lang.Class[])",
    "java.lang.reflect.Proxy$ProxyClassFactory: java.lang.Object apply(java.lang.Object,java.lang.Object)",
    "java.lang.reflect.Proxy$KeyFactory: java.lang.Object apply(java.lang.ClassLoader,java.lang.Class[])",
    "java.lang.reflect.Proxy$KeyFactory: java.lang.Object apply(java.lang.Object,java.lang.Object)",
    "java.lang.reflect.ReflectAccess: java.lang.reflect.Field newField(java.lang.Class,java.lang.String,java.lang.Class,int,int,java.lang.String,byte[])",
    "java.lang.reflect.ReflectAccess: java.lang.reflect.Method newMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,int,java.lang.String,byte[],byte[],byte[])",
    "java.lang.reflect.ReflectAccess: java.lang.reflect.Constructor newConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int,int,java.lang.String,byte[],byte[])",
    "java.lang.reflect.ReflectAccess: sun.reflect.MethodAccessor getMethodAccessor(java.lang.reflect.Method)",
    "java.lang.reflect.ReflectAccess: sun.reflect.ConstructorAccessor getConstructorAccessor(java.lang.reflect.Constructor)",
    "java.lang.reflect.ReflectAccess: int getConstructorSlot(java.lang.reflect.Constructor)",
    "java.lang.reflect.ReflectAccess: java.lang.String getConstructorSignature(java.lang.reflect.Constructor)",
    "java.lang.reflect.ReflectAccess: byte[] getConstructorAnnotations(java.lang.reflect.Constructor)",
    "java.lang.reflect.ReflectAccess: byte[] getConstructorParameterAnnotations(java.lang.reflect.Constructor)",
    "java.lang.reflect.ReflectAccess: byte[] getExecutableTypeAnnotationBytes(java.lang.reflect.Executable)",
    "java.lang.reflect.ReflectAccess: java.lang.reflect.Method copyMethod(java.lang.reflect.Method)",
    "java.lang.reflect.ReflectAccess: java.lang.reflect.Field copyField(java.lang.reflect.Field)",
    "java.lang.reflect.ReflectAccess: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)",
    "java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])",
    "java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])",
    "java.lang.Class: java.lang.Class forName(java.lang.String)"
  };

  public static String[] collectionAPIs = {
    "java.util.List: boolean add(java.lang.Object)",
    "java.util.List: boolean addAll(java.util.Collection)",
    "java.util.List: boolean addAll(int,java.util.Collection)",
    "java.util.Set: boolean add(java.lang.Object)",
    "java.util.Set: boolean addAll(java.util.Collection)",
    "java.util.Collection: boolean add(java.lang.Object)",
    "java.util.Collection: boolean addAll(java.util.Collection)",
    "java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)",
    "java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.Vector: boolean add(java.lang.Object)",
    "java.util.Vector: boolean addAll(java.util.Collection)",
    "java.util.Vector: boolean addAll(int,java.util.Collection)",
    "java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.HashMap: java.lang.Object putVal(int,java.lang.Object,java.lang.Object,boolean,boolean)",
    "java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.AbstractList: boolean add(java.lang.Object)",
    "java.util.AbstractList: boolean addAll(int,java.util.Collection)",
    "java.util.AbstractCollection: boolean add(java.lang.Object)",
    "java.util.AbstractCollection: boolean addAll(java.util.Collection)",
    "java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.HashMap$TreeNode: java.util.HashMap$TreeNode putTreeVal(java.util.HashMap,java.util.HashMap$Node[],int,java.lang.Object,java.lang.Object)",
    "java.util.ArrayList: boolean add(java.lang.Object)",
    "java.util.ArrayList: boolean addAll(java.util.Collection)",
    "java.util.ArrayList: boolean addAll(int,java.util.Collection)",
    "java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])",
    "java.util.Queue: boolean add(java.lang.Object)",
    "java.util.Deque: boolean add(java.lang.Object)",
    "java.util.HashSet: boolean add(java.lang.Object)",
    "java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)",
    "java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object)",
    "java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object,java.lang.Object[])",
    "java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)",
    "java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)",
    "java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)",
    "java.util.LinkedList: boolean add(java.lang.Object)",
    "java.util.LinkedList: boolean addAll(java.util.Collection)",
    "java.util.LinkedList: boolean addAll(int,java.util.Collection)",
    "java.util.AbstractSequentialList: boolean addAll(int,java.util.Collection)",
    "java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)",
    "java.util.concurrent.atomic.AtomicLong: long addAndGet(long)",
    "java.util.concurrent.ConcurrentHashMap$KeySetView: boolean add(java.lang.Object)",
    "java.util.concurrent.ConcurrentHashMap$KeySetView: boolean addAll(java.util.Collection)",
    "java.util.concurrent.ConcurrentHashMap$ValuesView: boolean add(java.lang.Object)",
    "java.util.concurrent.ConcurrentHashMap$ValuesView: boolean addAll(java.util.Collection)",
    "java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)",
    "java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean addAll(java.util.Collection)",
    "java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.lang.Object)",
    "java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)",
    "java.util.concurrent.ConcurrentLinkedQueue: boolean addAll(java.util.Collection)",
    "java.util.AbstractQueue: boolean add(java.lang.Object)",
    "java.util.AbstractQueue: boolean addAll(java.util.Collection)",
    "java.util.EnumMap: java.lang.Object put(java.lang.Enum,java.lang.Object)",
    "java.util.EnumMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)",
    "java.util.TreeSet: boolean add(java.lang.Object)",
    "java.util.TreeSet: boolean addAll(java.util.Collection)",
    "java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)",
    "java.util.concurrent.ArrayBlockingQueue: boolean add(java.lang.Object)",
    "java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)",
    "java.util.concurrent.CopyOnWriteArraySet: boolean addAll(java.util.Collection)",
    "java.util.ArrayDeque: boolean add(java.lang.Object)",
    "java.util.Collections$AsLIFOQueue: boolean add(java.lang.Object)",
    "java.util.Collections$CheckedCollection: boolean add(java.lang.Object)",
    "java.util.Collections$CheckedCollection: boolean addAll(java.util.Collection)",
    "java.util.Collections$CheckedList: boolean addAll(int,java.util.Collection)",
    "java.util.Collections$CheckedMap$CheckedEntrySet: boolean add(java.util.Map$Entry)",
    "java.util.Collections$CheckedMap$CheckedEntrySet: boolean addAll(java.util.Collection)",
    "java.util.Collections$CheckedMap$CheckedEntrySet: boolean add(java.lang.Object)",
    "java.util.Collections$CheckedMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.Collections$CheckedMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.stream.IntStream$Builder: java.util.stream.IntStream$Builder add(int)",
    "java.util.Collections$SingletonMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.Collections$SynchronizedList: boolean addAll(int,java.util.Collection)",
    "java.util.Collections$SynchronizedCollection: boolean add(java.lang.Object)",
    "java.util.Collections$SynchronizedCollection: boolean addAll(java.util.Collection)",
    "java.util.Collections$SynchronizedMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.Collections$SynchronizedMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.Collections$UnmodifiableCollection: boolean add(java.lang.Object)",
    "java.util.Collections$UnmodifiableCollection: boolean addAll(java.util.Collection)",
    "java.util.Collections$UnmodifiableMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.Collections$UnmodifiableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.RegularEnumSet: boolean add(java.lang.Enum)",
    "java.util.RegularEnumSet: boolean addAll(java.util.Collection)",
    "java.util.RegularEnumSet: boolean add(java.lang.Object)",
    "java.util.JumboEnumSet: boolean add(java.lang.Enum)",
    "java.util.JumboEnumSet: boolean addAll(java.util.Collection)",
    "java.util.JumboEnumSet: boolean add(java.lang.Object)",
    "java.util.PriorityQueue: boolean add(java.lang.Object)",
    "java.util.TreeMap$NavigableSubMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.BlockingDeque: boolean add(java.lang.Object)",
    "java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)",
    "java.util.concurrent.ConcurrentLinkedDeque: boolean add(java.lang.Object)",
    "java.util.concurrent.ConcurrentLinkedDeque: boolean addAll(java.util.Collection)",
    "java.util.concurrent.ConcurrentSkipListMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.ConcurrentSkipListMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object put(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.ConcurrentSkipListMap$SubMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.concurrent.ConcurrentSkipListSet: boolean add(java.lang.Object)",
    "java.util.concurrent.DelayQueue: boolean add(java.util.concurrent.Delayed)",
    "java.util.concurrent.DelayQueue: boolean add(java.lang.Object)",
    "java.util.concurrent.LinkedBlockingDeque: boolean add(java.lang.Object)",
    "java.util.concurrent.LinkedTransferQueue: boolean add(java.lang.Object)",
    "java.util.concurrent.PriorityBlockingQueue: boolean add(java.lang.Object)",
    "java.util.concurrent.atomic.AtomicIntegerArray: int addAndGet(int,int)",
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: int addAndGet(java.lang.Object,int)",
    "java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int addAndGet(java.lang.Object,int)",
    "java.util.concurrent.atomic.AtomicLongArray: long addAndGet(int,long)",
    "java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: long addAndGet(java.lang.Object,long)",
    "java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)",
    "java.util.ArrayList$SubList: boolean addAll(java.util.Collection)",
    "java.util.ArrayList$SubList: boolean addAll(int,java.util.Collection)",
    "java.util.Collections$UnmodifiableList: boolean addAll(int,java.util.Collection)",
    "java.util.SubList: boolean addAll(java.util.Collection)",
    "java.util.SubList: boolean addAll(int,java.util.Collection)",
    "java.util.Collections$SetFromMap: boolean add(java.lang.Object)",
    "java.util.Collections$EmptyMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)",
    "java.util.Hashtable$EntrySet: boolean add(java.util.Map$Entry)",
    "java.util.Hashtable$EntrySet: boolean add(java.lang.Object)"
  };

  public static String[] payloadAPIs = {
    "android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)",
    "android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)",
    "android.webkit.WebView: void loadUrl(java.lang.String)",
    "android.webkit.WebView: void postUrl(java.lang.String,byte[])",
    "android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)",
    "android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
    "android.webkit.WebView: void evaluateJavascript(java.lang.String,android.webkit.ValueCallback)",
    "org.mozilla.javascript.Function: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])",
    "org.mozilla.javascript.Function: java.lang.Object call(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[])"
  };

  public static String[] appendToStringAPIs = {
    "java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)"
  };

  public static String[] interComponentCommunicationAPIs = {"android.content.Intent"};

  public static String[] threadingAPIs = {
    "android.os.AsyncTask", "java.lang.Thread", "java.lang.Runnable"
  };

  public static boolean contains(String[] listOfAPIs, String str) {
    for (String s : listOfAPIs) {
      if (str.contains(s)) return true;
    }
    return false;
  }

  public static void load(String configPath) {
    String[] APIs = readAPIs(new File(configPath + File.separator + "ReflectionAPIs.txt"));
    if (APIs != null) reflectionAPIs = APIs;
    APIs = readAPIs(new File(configPath + File.separator + "PayloadAPIs.txt"));
    if (APIs != null) payloadAPIs = APIs;
    APIs = readAPIs(new File(configPath + File.separator + "ThreadingAPIs.txt"));
    if (APIs != null) threadingAPIs = APIs;
  }

  private static String[] readAPIs(File file) {
    if (file.exists()) {
      BufferedReader reader;
      try {
        reader = new BufferedReader(new FileReader(file));
        List<String> APIs = reader.lines().collect(Collectors.toList());
        String[] arr = new String[APIs.size()];
        APIs.toArray(arr);
        return arr;
      } catch (FileNotFoundException e) {
        System.err.println(file + " doesn't exist, use default APIs");
        e.printStackTrace();
      }
    }
    return null;
  }
}
